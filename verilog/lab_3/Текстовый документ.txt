module insertion_sort #(
    parameter WIDTH = 8,  // Ширина данных (бит)
    parameter SIZE  = 8   // Размер массива
)(
    input  wire clk,
    input  wire reset,
    input  wire start,    // Сигнал запуска сортировки
    input  wire [WIDTH*SIZE-1:0] data_in,  // Входной массив (упакованный)
    output reg  [WIDTH*SIZE-1:0] data_out, // Выходной массив (упакованный)
    output reg  done       // Сигнал завершения сортировки
);

    reg [WIDTH-1:0] array[SIZE-1:0];  // Внутренний массив для обработки
    integer i, j;                     // Переменные для циклов
    reg [WIDTH-1:0] key;              // Текущий элемент для вставки
    reg stop_flag;                    // Флаг для имитации break

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // При сбросе очищаем выходной массив и сигнал завершения
            data_out <= 0;
            done <= 0;
        end else if (start) begin
            // Распаковываем входной массив во внутренний массив
            for (i = 0; i < SIZE; i = i + 1) begin
                array[i] <= data_in[(i+1)*WIDTH-1 -: WIDTH];
            end

            // Алгоритм сортировки вставками
            for (i = 1; i < SIZE; i = i + 1) begin
                key <= array[i];  // Запоминаем текущий элемент
                stop_flag <= 0;   // Сбрасываем флаг

                // Цикл для сдвига элементов
                for (j = i - 1; j >= 0; j = j - 1) begin
                    if (!stop_flag && array[j] > key) begin
                        array[j + 1] <= array[j];  // Сдвигаем элемент вправо
                    end else begin
                        stop_flag <= 1;  // Устанавливаем флаг, чтобы прекратить сдвиг
                    end
                end

                // Вставляем key на правильное место
                array[j + 1] <= key;
            end

            // Упаковываем отсортированный массив на выход
            for (i = 0; i < SIZE; i = i + 1) begin
                data_out[(i+1)*WIDTH-1 -: WIDTH] <= array[i];
            end

            done <= 1;  // Устанавливаем флаг завершения
        end
    end
endmodule